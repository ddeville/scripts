#!/usr/bin/env python

from abc import (
    ABCMeta,
    abstractmethod,
)
from AppKit import (
    NSWorkspace,
    NSUserNotification,
    NSUserNotificationCenter,
)
from Foundation import (
    NSBundle,
    NSURL
)
from string import Template
from subprocess import (
    Popen,
    PIPE
)
import dropbox
import getopt
import json
import os
import sys
import time

def default_browser_identifier():
    url = NSURL.URLWithString_('http://ddeville.me')
    app = NSWorkspace.sharedWorkspace().URLForApplicationToOpenURL_(url)
    return NSBundle.bundleWithPath_(app.path()).bundleIdentifier()

def active_browser_identifier():
    running_app_identifier = NSWorkspace.sharedWorkspace().frontmostApplication().bundleIdentifier()
    if running_app_identifier in ['com.apple.Safari', 'com.google.Chrome']:
        return running_app_identifier
    return None

def tabs_filename(extension):
    browser = default_browser_identifier().split('.')[-1]
    filename = time.strftime('%Y-%m-%d %H.%M.%S ') + browser + '.' + extension
    return str(filename)

def notify(title=None, subtitle=None, text=None):
    notification = NSUserNotification.alloc().init()
    if title is not None:
        notification.setTitle_(title)
    if subtitle is not None:
        notification.setSubtitle_(subtitle)
    if text is not None:
        notification.setInformativeText_(str(text))
    NSUserNotificationCenter.defaultUserNotificationCenter().scheduleNotification_(notification)

class BrowserWindow(object):
    def __init__(self, tabs):
        self.tabs = tabs

class BrowserTab(object):
    def __init__(self, name, url):
        self.name = name
        self.url = url

    def __repr__(self):
        return self.name + ' - ' + self.url

def run_applescript(scpt, args=[]):
    p = Popen(['osascript', '-'] + args, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    stdout, stderr = p.communicate(scpt)
    return stdout

class AppleScriptBrowserRunner(object):
    '''Finds the default browser and retrieves the opened tabs'''

    def retrieve_browser_tabs_all_windows(self):
        current_browser = self._current_browser()
        if current_browser == 'com.google.Chrome':
            return self._retrieve_chrome_tabs(AppleScriptBrowserRunner.CHROME_SCRIPT_ALL)
        elif current_browser == 'com.apple.Safari':
            return self._retrieve_safari_tabs(AppleScriptBrowserRunner.SAFARI_SCRIPT_ALL)
        else:
            return None

    def retrieve_browser_tabs_front_window(self):
        current_browser = self._current_browser()
        if current_browser == 'com.google.Chrome':
            return self._retrieve_chrome_tabs(AppleScriptBrowserRunner.CHROME_SCRIPT_FRONT)
        elif current_browser == 'com.apple.Safari':
            return self._retrieve_safari_tabs(AppleScriptBrowserRunner.SAFARI_SCRIPT_FRONT)
        else:
            return None

    SCRIPT_TEMPLATE_ALL = '''
        tell application "$browser"
            set window_url_list to {}
            repeat with each_window in windows
                set url_list to {}
                repeat with each_tab in (every tab of each_window)
                    set end of url_list to ($title of each_tab) & ":!:" & ($url of each_tab) & (ASCII character 10)
                end repeat
                set end of window_url_list to url_list & "!=====!" & (ASCII character 10)
            end repeat
            return window_url_list as string
        end tell
    '''

    SCRIPT_TEMPLATE_FRONT = '''
        tell application "$browser"
            set url_list to {}
            repeat with each_tab in (every tab of window 1)
                set end of url_list to ($title of each_tab) & ":!:" & ($url of each_tab) & (ASCII character 10)
            end repeat
            return url_list as string
        end tell
    '''

    CHROME_ARGS = {'browser': 'Google Chrome', 'title': 'title', 'url': 'URL'}
    CHROME_SCRIPT_ALL = Template(SCRIPT_TEMPLATE_ALL).substitute(CHROME_ARGS)
    CHROME_SCRIPT_FRONT = Template(SCRIPT_TEMPLATE_FRONT).substitute(CHROME_ARGS)

    SAFARI_ARGS = {'browser': 'Safari', 'title': 'name', 'url': 'URL'}
    SAFARI_SCRIPT_ALL = Template(SCRIPT_TEMPLATE_ALL).substitute(SAFARI_ARGS)
    SAFARI_SCRIPT_FRONT = Template(SCRIPT_TEMPLATE_FRONT).substitute(SAFARI_ARGS)

    def _current_browser(self):
        current_browser = active_browser_identifier() or default_browser_identifier()
        return current_browser

    def _retrieve_chrome_tabs(self, script):
        output = run_applescript(script)
        return self._parse_applescript_output(output)

    def _retrieve_safari_tabs(self, script):
        output = run_applescript(script)
        return self._parse_applescript_output(output)

    def _parse_applescript_output(self, output):
        script_windows = output.split('!=====!')
        browser_windows = []

        for script_window in script_windows:
            script_tabs = script_window.split('\n')
            browser_tabs = []

            for script_tab in script_tabs:
                components = script_tab.split(':!:')
                if len(components) == 2:
                    browser_tab = BrowserTab(components[0], components[1])
                    browser_tabs.append(browser_tab)

            if len(browser_tabs):
                browser_window = BrowserWindow(browser_tabs)
                browser_windows.append(browser_window)

        if len(browser_windows) == 0:
            return None

        return browser_windows

class Emitter(object):
    __metaclass__ = ABCMeta

    @abstractmethod
    def generate(self, windows):
        pass

class HtmlEmitter(Emitter):
    HTML = '''
        <!DOCTYPE html>
        <html>
            <head>
                <meta http-equiv="content-type" content="text/html; charset=utf-8" />
                <title>Tabs</title>
                <style type="text/css" media="screen">
                    body {
                        -webkit-font-smoothing: antialiased;
                        font-family: Avenir, Helvetica, 'Lucida Grande', Lucida, Verdana, sans-serif;
                        margin: 0
                    }
                    #wrapper {
                        color: #303030;
                        position: relative;
                        text-indent: 0;
                        max-width: 600px;
                        margin: 50px auto;
                        padding: 20px;
                    }
                    h1 {
                        color: #444;
                        font-family: Georgia, Palatino, 'Palatino Linotype', Times, 'Times New Roman', serif;
                        font-size: 1.7em;
                        line-height: 1.8em;
                        margin: 1em 0;
                        border-bottom: dashed 2px #ccc;
                        font-weight: 300;
                    }
                    ul, ol {
                        list-style-position: inside;
                        width: 100%;
                        padding: 0;
                    }
                    li {
                        list-style-type: circle;
                        line-height: 1.4em;
                        color: #888;
                        word-wrap: break-word
                    }
                    a {
                        text-decoration: none;
                        color: #799a3b;
                    }
                    li a {
                        -webkit-transition: all .2s ease-in-out;
                        -moz-transition: all .2s ease-in-out;
                        -o-transition: all .2s ease-in-out;
                        transition: all .1s ease-in;
                        font-size: 16px;
                        font-weight: 500;
                        display: block;
                        margin: 4px 0;
                        padding: 1px 6px;
                        -moz-border-radius: 8px;
                        -webkit-border-radius: 8px;
                        border-radius: 8px;
                        border: dotted 1px transparent;
                        overflow: hidden;
                        text-overflow: ellipsis;
                        white-space: nowrap;
                    }
                    li a:hover {
                        border-color: #ccc;
                        background-color: rgba(121, 154, 59, 0.15);
                    }
                    #openlinks a {
                        margin-top: 15px;
                        display: block;
                        text-align: center;
                        font-weight: 600;
                    }
                    #openlinks a:hover {
                        color: black;
                    }
                </style>
            </head>
            <body>
                <div id="wrapper">
                    {{links}}
                </div>
                <script type="text/javascript">
                    function openLinks(id) {
                        var links = document.getElementById(id).getElementsByTagName('a');
                        var idx; var link;
                        for (idx = 0; link = links[idx]; idx++) {
                            open(link.href);
                        }
                    }
                </script>
            </body>
        </html>
    '''

    def generate(self, windows):
        links = ''
        for idx, window in enumerate(windows):
            links_id = 'links' + str(idx + 1)
            links += '<h1>Window ' + str(idx + 1) + '</h1>'
            links += '<ol id="' + links_id + '">'
            for tab in window.tabs:
                links += '<li><a href="{url}">{title}</a></li>\n'.format(url=tab.url, title=tab.name)
            links += '</ol>'
            links += '<p id="openlinks">'
            links += '<a onclick="if (confirm(\'Open all links in your browser?\')) {'
            links += 'openLinks(\'' + links_id + '\'); }" href="javascript:void(0);">Open All</a>'
            links += '</p>'
        html = HtmlEmitter.HTML
        html = html.replace('{{links}}', links)
        return html

class JsonEmitter(Emitter):
    def generate(self, windows):
        json_object = []
        for idx, window in enumerate(windows):
            tabs = []
            for tab in window.tabs:
                tabs.append({'title': tab.name, 'url': tab.url})
            json_object.append({'title': 'Window ' + str(idx + 1), 'tabs': tabs})
        return json.dumps(json_object)

class OmniFocusEmitter(Emitter):
    SCRIPT_TEMPLATE = '''
        set omnifocus_running to false
        tell application "System Events"
            if exists process "OmniFocus" then
                set omnifocus_running to true
            end if
        end tell
        if omnifocus_running is false then
            tell application "OmniFocus" to activate
        end if
        tell application "OmniFocus"
            tell front document
                make new inbox task with properties {name:"$name", note:"$url"}
            end tell
        end tell
    '''

    def generate(self, windows):
        for window in windows:
            for tab in window.tabs:
                args = {'name': tab.name.replace('"', '\"'), 'url': tab.url}
                script = Template(OmniFocusEmitter.SCRIPT_TEMPLATE).substitute(args)
                run_applescript(script)
        return 0

class DropboxConnection(object):
    def __init__(self, config_filename):
        config_path = os.path.expanduser(config_filename)
        with open(config_path) as f:
            settings = json.load(f)
            self._token = settings['token']

    def upload(self, path, data):
        # create the dropbox connection
        connection = dropbox.Dropbox(self._token)

        # upload the file to dropbox
        upload_mode = dropbox.files.WriteMode('add')
        connection.files_upload(data, path, upload_mode)

        # retrieve a shared link to the file
        shared_link_metadata = connection.sharing_create_shared_link(path)

        return shared_link_metadata.url

DROPBOX_BASE_DIRECTORY = '/Tabs'
DROPBOX_CONFIG_FILE = '~/.save-tabs-dropbox.json'

def upload_to_dropbox(filename, data):
    try:
        connection = DropboxConnection(DROPBOX_CONFIG_FILE)
    except (ValueError, IOError):
        report_error('Error: Malformed Dropbox config file: %s\n' % DROPBOX_CONFIG_FILE)
        exit(1)

    path = os.path.join(DROPBOX_BASE_DIRECTORY, filename)
    shared_link = connection.upload(path, data)

    NSWorkspace.sharedWorkspace().openURL_(NSURL.URLWithString_(shared_link))

OFFLINE_BASE_DIRECTORY = '~/Desktop'

def save_locally(filename, data):
    path = os.path.join(os.path.expanduser(OFFLINE_BASE_DIRECTORY), filename)
    with open(path, 'w') as f:
        f.write(data)

    NSWorkspace.sharedWorkspace().openURLs_withAppBundleIdentifier_options_additionalEventParamDescriptor_launchIdentifiers_(
        [NSURL.fileURLWithPath_(path)], default_browser_identifier(), 0, None, None)

def report_error(error):
    sys.stderr.write(error)
    notify(text=error)

def main(argv):
    try:
        opts, args = getopt.getopt(argv[1:], "fot", ["front", "offline", "todo"])
    except getopt.GetoptError:
        report_error('Usage: savetabs [--front] [--offline] [--todo]')
        sys.exit(2)

    front = False
    offline = False
    todo = False

    for opt, arg in opts:
        if opt in ('-f', '--front'):
            front = True
        elif opt in ('-o', '--offline'):
            offline = True
        elif opt in ('-t', '--todo'):
            todo = True

    runner = AppleScriptBrowserRunner()
    if front:
        tabs = runner.retrieve_browser_tabs_front_window()
    else:
        tabs = runner.retrieve_browser_tabs_all_windows()

    if tabs is None:
        report_error('Error: No tabs opened!')
        exit(1)

    # if we are emitting to omnifocus, shortcut here and just emit
    if todo:
        emitter = OmniFocusEmitter()
        ret = emitter.generate(tabs)
        exit(ret)

    # if we didn't emit to omnifocus, emit the html and write it either locally or to dropbox
    emitter = HtmlEmitter()
    html = emitter.generate(tabs)

    filename = tabs_filename('html')

    if offline:
        save_locally(filename, html)
    else:
        upload_to_dropbox(filename, html)

if __name__ == '__main__':
    main(sys.argv)
