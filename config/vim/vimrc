" vim needs a posix shell and fish is not
if &shell =~# 'fish$'
    set shell=bash
endif

set encoding=utf-8

" update and reload config
command! Config execute ":edit $MYVIMRC"
command! Reload execute "source ~/.vim/vimrc"

" store swap and backup files under `~/.vim/backup`
if !isdirectory($HOME . "/.vim/backup")
    call mkdir($HOME . "/.vim/backup", "p", 0700)
endif
set directory=$HOME/.vim/backup//
set backupdir=$HOME/.vim/backup//
set undodir=$HOME/.vim/backup//

" enable syntax highlighting
syntax enable

" attempt to determine the file type based on name and content
filetype plugin indent on

" vim-plug plugins
call plug#begin('~/.vim-plug-plugins')
    Plug 'itchyny/lightline.vim'
        " don't show `-- INSERT --` since we have a fancy status line
        set noshowmode
        " update color scheme
        let g:lightline =
        \ {
        \   'colorscheme': 'wombat',
        \   'active': {
        \     'left': [['mode', 'paste'], ['gitbranch', 'readonly', 'filename', 'modified']]
        \   },
        \   'component_function': {
        \     'gitbranch': 'fugitive#head'
        \   },
        \ }
    Plug 'chriskempson/base16-vim'
    Plug 'mhinz/vim-startify'
    Plug 'tpope/vim-git'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-eunuch'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-unimpaired'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-vinegar'
    Plug 'tpope/vim-sleuth'
    Plug 'vifm/vifm.vim'
    Plug 'vim-scripts/a.vim'
    Plug 'rust-lang/rust.vim'
        let g:rustfmt_autosave = 1
    Plug 'fatih/vim-go'
        let g:go_fmt_autosave = 1
    Plug 'dag/vim-fish'
    Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --bin'}
    Plug 'junegunn/fzf.vim'
        let g:fzf_layout = { 'down': '35%' }
        nnoremap <Leader>; :Buffers<CR>
        nnoremap ; :Buffers<CR>
        nnoremap <Leader>o :Files<CR>
        nnoremap <C-p> :Files<CR>
        nnoremap <Leader>s :GFiles?<CR>
        nnoremap <Leader>t :Tags<CR>
        nnoremap // :BLines<CR>
    Plug 'Valloric/YouCompleteMe'
        " close sticky preview window at the bottom after insertion
        let g:ycm_autoclose_preview_window_after_insertion = 1
        " no diagnostic integration (this makes moving through c/cpp/objc files super slow)
        let g:ycm_show_diagnostics_ui = 0
        let g:ycm_enable_diagnostic_signs = 0
        let g:ycm_enable_diagnostic_highlighting = 0
        let g:ycm_echo_current_diagnostic = 0
        " remaps to go to a definition or line
        nnoremap <C-j> :YcmCompleter GoTo<CR>
        nnoremap <C-]> :YcmCompleter GoTo<CR>
        nnoremap <C-k> :YcmCompleter GetDoc<CR>
        " language server
        let g:ycm_language_server =
        \ [
        \   {
        \     'name': 'rust',
        \     'cmdline': ['rust-analyzer'],
        \     'filetypes': ['rust'],
        \     'project_root_files': ['Cargo.toml'],
        \   }
        \ ]
    Plug 'mhinz/vim-grepper'
        let g:grepper = {}
        let g:grepper.tools = ['rg', 'git', 'grep']
        let g:grepper.highlight = 1
        nnoremap <Leader>f :Grepper -tool rg<CR>
        nmap gs <plug>(GrepperOperator)
        xmap gs <plug>(GrepperOperator)
    if has('nvim')
        Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    endif
call plug#end()

" setup tree-sitter (needs to be outside of the `plug` block or lua errors)
if has('nvim')
lua <<EOF
    require'nvim-treesitter.configs'.setup {
        highlight = {
            enable = true,
        },
    }
EOF
endif

" shorten the delay to transition to normal mode after pressing escape
set timeoutlen=1000 ttimeoutlen=0

" dark background is better
set background=dark

" setup base16 colorscheme
if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif

" allow switching between buffers without saving first
set hidden

" use 4 spaces instead of tabs
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab

" set mouse support so that we can select text and tabs
if has('mouse')
    set mouse=a
endif

" if no known file type keep the same indent as the current line
set autoindent

" backspace through anything in insert mode
set backspace=indent,eol,start

" highlight search results and start searching immediately
set hlsearch
set incsearch

" always show at least one line above/below the cursor (and 5 on each side if not wrapping)
set scrolloff=1
set sidescrolloff=5

" display the cursor position in the status line
set ruler

" display the line number on the left
set number

" display a column at 80 char
set colorcolumn=80

" highlight the current line
set cursorline

" always show the status line even when there is only one window
set laststatus=2

" autoload file changes
set autoread

" open new splits on right and bottom
set splitbelow
set splitright

" trailing whitespace is bad
highlight WhiteSpaceEOL ctermbg=red guibg=red
autocmd InsertEnter * match WhiteSpaceEOL /\s\+\%#\@<!$/
autocmd InsertLeave * match WhiteSpaceEOL /\s\+$/

" netrw
let g:netrw_localrmdir = 'rm -r'
let g:netrw_liststyle = 1
let g:netrw_winsize = 85
let g:netrw_browse_split = 0

" ==> MAPPINGS

" disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" simpler normal mode mapping
inoremap jj <esc>

" map screen redraw to also turn off search highlighting
nnoremap <C-l> :nohl<CR><C-l>

" move lines up and down when in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" ==> FUNCTIONS

nnoremap <F8> :call ()<CR>

" insert an RFC 3339 date
function! DateRfc3339()
    let format = '+\%Y-\%m-\%dT\%H:\%M:\%SZ'
    let cmd = '/bin/date -u ' . shellescape(format)
    let result = substitute(system(cmd), '[\]\|[[:cntrl:]]', '', 'g')
    " Append space + result to current line without moving cursor.
    call setline(line('.'), getline('.') . ' ' . result)
endfunction

" search current selection in visual mode with */#
function! s:VSetSearch()
    let temp = @@
    norm! gvy
    let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
    let @@ = temp
endfunction
vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>

" fugitive extension to get `:Gbrowse` to print the sourcegraph link
function! DropboxSourcegraphURL(opts) abort
    let repo = matchstr(a:opts.remote, '^git@git.sjc.dropbox.com:\zs.*\ze$')
    if repo ==# ''
        let repo = matchstr(a:opts.remote, '^ssh://git@git.sjc.dropbox.com/\zs.*\ze$')
        if repo ==# ''
            return ''
        endif
    endif
    let url = "https://sourcegraph.pp.dropbox.com/" . repo
    let url .= "@" . a:opts.repo.rev_parse(a:opts.commit)
    let url .= "/-/blob/" . a:opts.path
    if a:opts.line1
        let url .= "#L" . a:opts.line1
    endif
    return url
endfunction
if !exists('g:fugitive_browse_handlers')
    let g:fugitive_browse_handlers = []
endif
if index(g:fugitive_browse_handlers, function('DropboxSourcegraphURL')) < 0
    call insert(g:fugitive_browse_handlers, function('DropboxSourcegraphURL'))
endif
