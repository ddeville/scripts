#!/bin/bash

bspc config border_width 2
bspc config window_gap 0
bspc config focused_border_color \#ff8c00
bspc config split_ratio 0.5
bspc config borderless_monocle false
bspc config gapless_monocle false

if [[ $(hostname) == "arch" ]]; then
  bspc monitor DisplayPort-0 -d web media flt a b c
  bspc monitor DisplayPort-1 -d code a b c
elif [[ $(hostname) == "framework" ]]; then
  bspc monitor -d web code media flt a b c
else
  bspc monitor -d web code media flt a b c
fi

bspc rule -a zoom desktop="zoom" state=floating
bspc rule -a "zoom " desktop="zoom" state=floating
bspc rule -a 1Password state=floating
bspc rule -a QjackCtl state=floating

# Get the right hwmon path to monitor CPU temp in polybar.
# Specifically we are looking for the hardware monitor with name `k10temp` which is the driver that
# can read AMD CPU temps.
# Once we have matched on this `k10temp` name, we are looking for the right temperature among:
#  - Tdie -> the die temperature, that is the real measured temp
#  - Tctl -> the temperature control value, which is the reported temp
#  - Tccd{1..8} ->  the temperature of the core complex dies.
# Tdie is most likely what we want since it's the most accurate and Tctl can be somewhat different
# since it is not necessarily the real measured temp and is instead used for fan control.
# See https://www.kernel.org/doc/html/v5.12/hwmon/k10temp.html
# However, Tdie also seems to be missing as of kernel version ~5.14 so use Tctl for now.
CPU_LABEL="k10temp: Tctl"
for i in /sys/class/hwmon/hwmon*/temp*_input; do
  if [ "$(<"$(dirname "$i")"/name): $(cat "${i%_*}"_label 2>/dev/null || basename "${i%_*}")" = "$CPU_LABEL" ]; then
    export HWMON_PATH="$i"
  fi
done

# start picom compositor
picom --daemon

# setup sxhkd
killall --quiet --wait --user "$USER" --exact sxhkd >/dev/null
sxhkd &

# set up polybar
polybar-msg cmd quit >/dev/null
mkdir -p "$HOME/.cache/logs"

if [[ $(hostname) == "arch" ]]; then
  MONITOR=DisplayPort-0 HOME_MOUNT=/home/damien/data polybar main 2>"$HOME/.cache/logs/polybar-main.err" &
  MONITOR=DisplayPort-1 polybar term 2>"$HOME/.cache/logs/polybar-term.err" &
elif [[ $(hostname) == "framework" ]]; then
  BATTERY=BAT1 POWER_ADAPTER=ACAD polybar laptop 2>"$HOME/.cache/logs/polybar-laptop.err" &
else
  polybar minimal 2>"$HOME/.cache/logs/polybar-minimal.err" &
fi

# make all windows on desktop 'flt' floating
killall --quiet --wait --user "$USER" --exact bspwm-floating >/dev/null
[ -x "$HOME/.local/bin/bspwm-floating" ] && "$HOME/.local/bin/bspwm-floating" flt &

# set up nitrogen for background pictures
# no need to kill existing instances since when using `--restore` the process exits as soon as the background is set.
nitrogen --restore &
