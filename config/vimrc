" vim needs a posix shell and fish is not
if &shell =~# 'fish$'
    set shell=bash
endif

set encoding=utf-8

" store swap and backup files under `~/.vim/backup`
if !isdirectory($HOME . "/.vim/backup")
    call mkdir($HOME . "/.vim/backup", "p", 0700)
endif
set directory=$HOME/.vim/backup//
set backupdir=$HOME/.vim/backup//
set undodir=$HOME/.vim/backup//

" enable syntax highlighting
syntax enable

" attempt to determine the file type based on name and content
filetype plugin indent on

" vim-plug plugins
call plug#begin('~/.vim-plug-plugins')
    Plug 'itchyny/lightline.vim'
    Plug 'tpope/vim-git'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-rhubarb'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-eunuch'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-unimpaired'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-vinegar'
    Plug 'tpope/vim-dispatch'
    Plug 'vifm/vifm.vim'
    Plug 'vim-scripts/a.vim'
    Plug 'rust-lang/rust.vim'
    Plug 'fatih/vim-go'
    Plug 'dag/vim-fish'
    Plug 'junegunn/fzf.vim'
    Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --bin'}
    Plug 'Valloric/YouCompleteMe'
    Plug 'chriskempson/base16-vim'
    Plug 'jremmen/vim-ripgrep'
call plug#end()

" shorten the delay to transition to normal mode after pressing escape
set timeoutlen=1000 ttimeoutlen=0

" dark background is better
set background=dark

" setup base16 colorscheme
if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif

" allow switching between buffers without saving first
set hidden

" use 4 spaces instead of tabs
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab

" set mouse support so that we can select text and tabs
set mouse=a

" if no known file type keep the same indent as the current line
set autoindent

" backspace through anything in insert mode
set backspace=indent,eol,start

" highlight search results and start searching immediately
set hlsearch
set incsearch

" always show at least one line above/below the cursor (and 5 on each side if not wrapping)
set scrolloff=1
set sidescrolloff=5

" display the cursor position in the status line
set ruler

" display the line number on the left
set number

" display a column at 80 char
set colorcolumn=80

" highlight the current line
set cursorline

" always show the status line even when there is only one window
set laststatus=2

" autoload file changes
set autoread

" open new splits on right and bottom
set splitbelow
set splitright

" trailing whitespace is bad
highlight WhiteSpaceEOL ctermbg=red guibg=red
autocmd InsertEnter * match WhiteSpaceEOL /\s\+\%#\@<!$/
autocmd InsertLeave * match WhiteSpaceEOL /\s\+$/

" MAPPINGS

" disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" map screen redraw to also turn off search highlighting
nnoremap <C-l> :nohl<CR><C-l>

" use `H` and `L` to move to start and end of line
nnoremap <S-l> $
nnoremap <S-h> 0

" simpler normal mode mapping
inoremap jk <esc>

" ==> CONFIG `junegunn/fzf.vim`

let g:fzf_layout = { 'down': '35%' }
" remap some `fzf` functions
nnoremap ; :Buffers<CR>
nnoremap <Leader>o :Files<CR>
nnoremap <Leader>t :Tags<CR>
nnoremap <Leader>s :GFiles?<CR>

" ==> CONFIG `jremmen/vim-ripgrep`

" remove some `rg` functions
nnoremap <Leader>f :Rg<space>

" ==> CONFIG `Valloric/YouCompleteMe`

" close sticky preview window at the bottom after insertion
let g:ycm_autoclose_preview_window_after_insertion = 1
" no diagnostic integration (this makes moving through c/cpp/objc files super slow)
let g:ycm_show_diagnostics_ui = 0
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_echo_current_diagnostic = 0
" cool remaps to go to a definition or line
nnoremap <C-j> :YcmCompleter GoTo<CR>
nnoremap <C-k> :YcmCompleter GetDoc<CR>

" ==> CONFIG `itchyny/lightline.vim`

" don't show `-- INSERT --` since we have a fancy status line
set noshowmode

" update color scheme
let g:lightline =
\ {
\   'colorscheme': 'wombat',
\   'active': {
\     'left': [['mode', 'paste'], ['gitbranch', 'readonly', 'filename', 'modified']]
\   },
\   'component_function': {
\     'gitbranch': 'fugitive#head'
\   },
\ }

" ==> LANGUAGES

" rust
let g:rustfmt_autosave = 1
let g:ycm_language_server =
\ [
\   {
\     'name': 'rust',
\     'cmdline': ['rust-analyzer'],
\     'filetypes': ['rust'],
\     'project_root_files': ['Cargo.toml'],
\   }
\ ]

" go
let g:go_fmt_autosave = 1

" typescript
autocmd Filetype typescript setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype typescriptreact setlocal tabstop=2 shiftwidth=2 softtabstop=2

" ==> FUNCTIONS

nnoremap <F8> :call ()<CR>
function! DateRfc3339()
  let format = '+\%Y-\%m-\%dT\%H:\%M:\%SZ'
  let cmd = '/bin/date -u ' . shellescape(format)
  let result = substitute(system(cmd), '[\]\|[[:cntrl:]]', '', 'g')
  " Append space + result to current line without moving cursor.
  call setline(line('.'), getline('.') . ' ' . result)
endfunction
