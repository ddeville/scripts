#!/usr/bin/env python

import argparse
import os
import shutil

from py.package_manager import (
    PackageType,
    create_package_manager,
)
from py.platform import (
    LINUX,
    MACOS,
    get_current_platform,
)
from py.task_executor import (
    ExecutorConfig,
    TaskManifest,
    print_all_tasks_for_config,
    print_task_for_config,
    run_all_tasks_for_config,
    run_task_for_config,
)
from py.util import (
    command_path,
    copy_file,
    create_dirs,
    download_file,
    is_cmd_installed,
    run_command,
    run_script_as_root,
)

SCRIPTS_PATH = os.path.dirname(os.path.realpath(__file__))
ALL_PLATFORMS = [MACOS, LINUX]
LITE = "lite"
XDG_CONFIG_HOME = os.getenv("XDG_CONFIG_HOME", os.path.expanduser("~/.config"))
XDG_DATA_HOME = os.getenv("XDG_DATA_HOME", os.path.expanduser("~/.local/share"))
XDG_BIN_HOME = os.path.expanduser("~/.local/bin")

# Tasks

def task_install_package_manager():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        package_manager = create_package_manager()
        package_manager.install()

    return TaskManifest(cmd=cmd, tags=ALL_PLATFORMS + [LITE], dependencies=[])

def task_install_packages():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        package_manager = create_package_manager()
        package_manager.install_packages([
            "bat",
            "curl",
            "exa",
            "fish",
            "htop",
            "jq",
            "neovim",
            "ripgrep",
            "stow",
            "tmux",
            {PackageType.BREW: "fd", PackageType.PACMAN: "fd", PackageType.DEB: "fd-find"},
        ])

    return TaskManifest(cmd=cmd, tags=ALL_PLATFORMS + [LITE], dependencies=["install_package_manager"])

def task_install_packages_full():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        package_manager = create_package_manager()
        package_manager.install_packages([
            "cmake",
            "golang",
            {PackageType.BREW: "ninja", PackageType.PACMAN: "ninja", PackageType.DEB: "ninja-build"},
            {PackageType.BREW: "node", PackageType.PACMAN: "nodejs", PackageType.DEB: "nodejs"},
            {PackageType.PACMAN: "npm", PackageType.DEB: "npm"},
            {PackageType.PACMAN: "ttf-anonymous-pro", PackageType.DEB: "ttf-anonymous-pro"},
        ])

    return TaskManifest(cmd=cmd, tags=ALL_PLATFORMS, dependencies=["install_package_manager"])

def task_update_shell():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        shell_path = command_path("fish")
        assert shell_path is not None, "Cannot find shell path"

        # let's check whether fish was added to /etc/shells
        with open("/etc/shells") as f:
            if not shell_path in f.read():
                # we need to add fish to /etc/shells
                print("====> adding fish to /etc/shells")
                script = "#!/bin/sh\necho \"%s\" >> /etc/shells" % shell_path
                run_script_as_root(script)
            else:
                print("====> fish already in /etc/shells")

        # next let's check whether we need to change the shell
        if os.environ.get("SHELL") != shell_path:
            print("====> changing shell to fish")
            run_command(["chsh", "-s", shell_path])
        else:
            print("====> fish is already default shell")

    return TaskManifest(cmd=cmd, tags=ALL_PLATFORMS + [LITE], dependencies=["install_packages", "install_packages_full"])

def task_install_base16():
    # type: () -> TaskManifest
    repos = [
        ("base16-shell", "https://github.com/ddeville/base16-shell.git"),
    ]
    def cmd():
        # type: () -> None
        create_dirs(XDG_DATA_HOME)
        for name, repo_url in repos:
            path = os.path.join(XDG_DATA_HOME, name)
            # first remove the existing repo if it exists
            if os.path.exists(path):
                print("====> deleting existing %s repo" % name)
                shutil.rmtree(path)
            # second, clone the repo in the right place
            print("====> installing %s repo" % name)
            run_command(["git", "clone", repo_url, path])

    return TaskManifest(cmd=cmd, tags=ALL_PLATFORMS + [LITE], dependencies=["update_shell"])

def task_update_dot_files():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        print("====> running stow")
        run_command(["stow", "-d", os.path.join(SCRIPTS_PATH, "config"), "-t", os.path.expanduser("~"), ".", "-v"])

        create_dirs(XDG_BIN_HOME)
        run_command(["stow", "-d", os.path.join(SCRIPTS_PATH, "bin"), "-t", XDG_BIN_HOME, ".", "-v"])
        if get_current_platform() == MACOS:
            run_command(["stow", "-d", os.path.join(SCRIPTS_PATH, "macos", "bin"), "-t", XDG_BIN_HOME, ".", "-v"])

    return TaskManifest(cmd=cmd, tags=ALL_PLATFORMS + [LITE], dependencies=["install_base16"])

def task_install_pyenv():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        if is_cmd_installed("pyenv"):
            print("====> updating pyenv")
            run_command(["pyenv", "update"])
        else:
            pyenv_path = os.path.join(XDG_DATA_HOME, "pyenv")
            if os.path.exists(pyenv_path):
                print("====> deleting existing pyenv install")
                shutil.rmtree(pyenv_path)
            print("====> installing pyenv")
            pyenv_installer_path = "https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer"
            script_path = download_file(pyenv_installer_path)
            env = os.environ.copy()
            env["PYENV_ROOT"] = pyenv_path
            run_command(["bash", script_path], env=env)

    return TaskManifest(cmd=cmd, tags=ALL_PLATFORMS, dependencies=["update_dot_files"])

def task_install_rustup():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        if is_cmd_installed("rustup"):
            print("====> updating rustup")
            run_command(["rustup", "self", "update"])
        else:
            print("====> install rustup")
            script_path = download_file("https://sh.rustup.rs")
            env = os.environ.copy()
            env["CARGO_HOME"] = os.path.join(XDG_DATA_HOME, "cargo")
            env["RUSTUP_HOME"] = os.path.join(XDG_DATA_HOME, "rustup")
            run_command(["sh", script_path, "-y", "--no-modify-path"], env=env)
        pass

    return TaskManifest(cmd=cmd, tags=ALL_PLATFORMS, dependencies=["update_dot_files"])

def task_update_tmux_plugins():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        tpm_path = os.path.join(XDG_CONFIG_HOME, "tmux", "plugins", "tpm")

        # first install TPM itself if needed
        if not os.path.exists(tpm_path):
            print("====> installing TPM")
            run_command(["git", "clone", "https://github.com/tmux-plugins/tpm", tpm_path])

        # and update the plugins
        print("====> updating tmux plugins")
        run_command([os.path.join(tpm_path, "bin", "install_plugins")])
        run_command([os.path.join(tpm_path, "bin", "update_plugins"), "all"])

    return TaskManifest(cmd=cmd, tags=ALL_PLATFORMS + [LITE], dependencies=["update_dot_files"])

def task_update_vim_plugins():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        print("====> updating vim plugins")
        # update vim-plug itself
        run_command(["nvim", "+PlugUpgrade", "+qall"])
        # install or update all plugins
        run_command(["nvim", "+PlugUpdate", "+qall"])

    return TaskManifest(cmd=cmd, tags=ALL_PLATFORMS + [LITE], dependencies=["update_dot_files", "install_rustup"])

def task_update_library_visibility():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        print("====> updating ~/Library visibility")
        nohidden_flag = 1 << 15
        library_path = os.path.expanduser("~/Library")
        library_stat = os.stat(library_path)
        os.chflags(library_path, library_stat.st_flags & ~nohidden_flag)

    return TaskManifest(cmd=cmd, tags=[MACOS], dependencies=["update_dot_files"])

def task_update_system_preferences():
    # type: () -> TaskManifest
    def update_prefs(key, val, domain="NSGlobalDomain"):
        # type: (str, str, str) -> None
        run_command(["defaults", "write", domain, key, val])

    def cmd():
        # type: () -> None
        print("====> updating system preferences")
        update_prefs("NSShowAppCentricOpenPanelInsteadOfUntitledFile", "0")
        update_prefs("NSQuitAlwaysKeepsWindows", "1")
        update_prefs("TALLogoutSavesState", "1", "com.apple.loginwindow")
        # text
        update_prefs("NSAutomaticSpellingCorrectionEnabled", "0")
        update_prefs("NSAutomaticCapitalizationEnabled", "0")
        update_prefs("NSAutomaticDashSubstitutionEnabled", "0")
        update_prefs("NSAutomaticPeriodSubstitutionEnabled", "0")
        update_prefs("NSAutomaticQuoteSubstitutionEnabled", "0")
        update_prefs("NSAutomaticTextCompletionEnabled", "0")
        # key repeat
        # update_prefs("KeyRepeat", "2")
        # update_prefs("InitialKeyRepeat", "15")
        update_prefs("ApplePressAndHoldEnabled", "0")
        # hot corners
        # update_prefs("wvous-bl-corner", "4", "com.apple.dock")
        # update_prefs("wvous-bl-modifier", "0", "com.apple.dock")
        # update_prefs("wvous-br-corner", "3", "com.apple.dock")
        # update_prefs("wvous-br-modifier", "0", "com.apple.dock")
        # update_prefs("wvous-tl-corner", "11", "com.apple.dock")
        # update_prefs("wvous-tl-modifier", "0", "com.apple.dock")
        # update_prefs("wvous-tr-corner", "2", "com.apple.dock")
        # update_prefs("wvous-tr-modifier", "0", "com.apple.dock")

    return TaskManifest(cmd=cmd, tags=[MACOS], dependencies=["update_dot_files"])

def task_update_iterm_sync_folder_prefs():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        print("====> updating iterm preferences")
        run_command(["defaults", "write", "com.googlecode.iterm2", "PrefsCustomFolder",
            os.path.join(SCRIPTS_PATH, "macos", "iterm")])

    return TaskManifest(cmd=cmd, tags=[MACOS], dependencies=["update_dot_files"])

def task_install_fonts():
    # type: () -> TaskManifest
    def cmd():
        # type: () -> None
        print("====> installing fonts")
        fonts_path = os.path.join(SCRIPTS_PATH, "fonts")
        dest_path = os.path.join(os.path.expanduser("~"), "Library", "Fonts")
        create_dirs(dest_path)
        for folder in os.listdir(fonts_path):
            font_path = os.path.join(fonts_path, folder)
            if os.path.isdir(font_path) and not folder.startswith("."):
                copy_file(font_path, os.path.join(dest_path, folder), True)

    return TaskManifest(cmd=cmd, tags=[MACOS], dependencies=["update_dot_files"])

# Main

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Install scripts on the current system.")
    parser.add_argument("action", choices=["list", "run"], help="whether to list the tasks or actually run them")
    parser.add_argument("-p", "--platform", action="store", help="the platform to use")
    parser.add_argument("-l", "--lite", action="store_true", help="whether a lite install should be performed")
    parser.add_argument("-t", "--task", action="store", help="run a specific task")
    args = parser.parse_args()

    module_name = __name__
    tags = []

    if args.lite:
        tags.append(LITE)

    platform = args.platform if args.platform else get_current_platform()
    assert platform in ALL_PLATFORMS, "Unknown platform: %s" % platform
    tags.append(platform)

    config = ExecutorConfig(module_name, tags)

    if args.action == "list":
        if args.task:
            print_task_for_config(config, args.task)
        else:
            print_all_tasks_for_config(config)
    elif args.action == "run":
        if args.task:
            run_task_for_config(config, args.task)
        else:
            run_all_tasks_for_config(config)
